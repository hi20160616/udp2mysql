// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UDPPacketApiClient is the client API for UDPPacketApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UDPPacketApiClient interface {
	ListUDPPackets(ctx context.Context, in *ListUDPPacketsRequest, opts ...grpc.CallOption) (*ListUDPPacketsResponse, error)
	GetUDPPacket(ctx context.Context, in *GetUDPPacketRequest, opts ...grpc.CallOption) (*UDPPacket, error)
	CreateUDPPacket(ctx context.Context, in *CreateUDPPacketRequest, opts ...grpc.CallOption) (*UDPPacket, error)
	// UpdateUDPPacket MUST have no rename or move feature.
	UpdateUDPPacket(ctx context.Context, in *UpdateUDPPacketRequest, opts ...grpc.CallOption) (*UDPPacket, error)
	DeleteUDPPacket(ctx context.Context, in *DeleteUDPPacketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type uDPPacketApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUDPPacketApiClient(cc grpc.ClientConnInterface) UDPPacketApiClient {
	return &uDPPacketApiClient{cc}
}

func (c *uDPPacketApiClient) ListUDPPackets(ctx context.Context, in *ListUDPPacketsRequest, opts ...grpc.CallOption) (*ListUDPPacketsResponse, error) {
	out := new(ListUDPPacketsResponse)
	err := c.cc.Invoke(ctx, "/udp2mysql.v1.UDPPacketApi/ListUDPPackets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDPPacketApiClient) GetUDPPacket(ctx context.Context, in *GetUDPPacketRequest, opts ...grpc.CallOption) (*UDPPacket, error) {
	out := new(UDPPacket)
	err := c.cc.Invoke(ctx, "/udp2mysql.v1.UDPPacketApi/GetUDPPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDPPacketApiClient) CreateUDPPacket(ctx context.Context, in *CreateUDPPacketRequest, opts ...grpc.CallOption) (*UDPPacket, error) {
	out := new(UDPPacket)
	err := c.cc.Invoke(ctx, "/udp2mysql.v1.UDPPacketApi/CreateUDPPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDPPacketApiClient) UpdateUDPPacket(ctx context.Context, in *UpdateUDPPacketRequest, opts ...grpc.CallOption) (*UDPPacket, error) {
	out := new(UDPPacket)
	err := c.cc.Invoke(ctx, "/udp2mysql.v1.UDPPacketApi/UpdateUDPPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDPPacketApiClient) DeleteUDPPacket(ctx context.Context, in *DeleteUDPPacketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/udp2mysql.v1.UDPPacketApi/DeleteUDPPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UDPPacketApiServer is the server API for UDPPacketApi service.
// All implementations must embed UnimplementedUDPPacketApiServer
// for forward compatibility
type UDPPacketApiServer interface {
	ListUDPPackets(context.Context, *ListUDPPacketsRequest) (*ListUDPPacketsResponse, error)
	GetUDPPacket(context.Context, *GetUDPPacketRequest) (*UDPPacket, error)
	CreateUDPPacket(context.Context, *CreateUDPPacketRequest) (*UDPPacket, error)
	// UpdateUDPPacket MUST have no rename or move feature.
	UpdateUDPPacket(context.Context, *UpdateUDPPacketRequest) (*UDPPacket, error)
	DeleteUDPPacket(context.Context, *DeleteUDPPacketRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUDPPacketApiServer()
}

// UnimplementedUDPPacketApiServer must be embedded to have forward compatible implementations.
type UnimplementedUDPPacketApiServer struct {
}

func (UnimplementedUDPPacketApiServer) ListUDPPackets(context.Context, *ListUDPPacketsRequest) (*ListUDPPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUDPPackets not implemented")
}
func (UnimplementedUDPPacketApiServer) GetUDPPacket(context.Context, *GetUDPPacketRequest) (*UDPPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUDPPacket not implemented")
}
func (UnimplementedUDPPacketApiServer) CreateUDPPacket(context.Context, *CreateUDPPacketRequest) (*UDPPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUDPPacket not implemented")
}
func (UnimplementedUDPPacketApiServer) UpdateUDPPacket(context.Context, *UpdateUDPPacketRequest) (*UDPPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUDPPacket not implemented")
}
func (UnimplementedUDPPacketApiServer) DeleteUDPPacket(context.Context, *DeleteUDPPacketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUDPPacket not implemented")
}
func (UnimplementedUDPPacketApiServer) mustEmbedUnimplementedUDPPacketApiServer() {}

// UnsafeUDPPacketApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UDPPacketApiServer will
// result in compilation errors.
type UnsafeUDPPacketApiServer interface {
	mustEmbedUnimplementedUDPPacketApiServer()
}

func RegisterUDPPacketApiServer(s grpc.ServiceRegistrar, srv UDPPacketApiServer) {
	s.RegisterService(&UDPPacketApi_ServiceDesc, srv)
}

func _UDPPacketApi_ListUDPPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUDPPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDPPacketApiServer).ListUDPPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udp2mysql.v1.UDPPacketApi/ListUDPPackets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDPPacketApiServer).ListUDPPackets(ctx, req.(*ListUDPPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDPPacketApi_GetUDPPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUDPPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDPPacketApiServer).GetUDPPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udp2mysql.v1.UDPPacketApi/GetUDPPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDPPacketApiServer).GetUDPPacket(ctx, req.(*GetUDPPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDPPacketApi_CreateUDPPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUDPPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDPPacketApiServer).CreateUDPPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udp2mysql.v1.UDPPacketApi/CreateUDPPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDPPacketApiServer).CreateUDPPacket(ctx, req.(*CreateUDPPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDPPacketApi_UpdateUDPPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUDPPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDPPacketApiServer).UpdateUDPPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udp2mysql.v1.UDPPacketApi/UpdateUDPPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDPPacketApiServer).UpdateUDPPacket(ctx, req.(*UpdateUDPPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDPPacketApi_DeleteUDPPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUDPPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDPPacketApiServer).DeleteUDPPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/udp2mysql.v1.UDPPacketApi/DeleteUDPPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDPPacketApiServer).DeleteUDPPacket(ctx, req.(*DeleteUDPPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UDPPacketApi_ServiceDesc is the grpc.ServiceDesc for UDPPacketApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UDPPacketApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "udp2mysql.v1.UDPPacketApi",
	HandlerType: (*UDPPacketApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUDPPackets",
			Handler:    _UDPPacketApi_ListUDPPackets_Handler,
		},
		{
			MethodName: "GetUDPPacket",
			Handler:    _UDPPacketApi_GetUDPPacket_Handler,
		},
		{
			MethodName: "CreateUDPPacket",
			Handler:    _UDPPacketApi_CreateUDPPacket_Handler,
		},
		{
			MethodName: "UpdateUDPPacket",
			Handler:    _UDPPacketApi_UpdateUDPPacket_Handler,
		},
		{
			MethodName: "DeleteUDPPacket",
			Handler:    _UDPPacketApi_DeleteUDPPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/udp2mysql/v1/udp2mysql.proto",
}
